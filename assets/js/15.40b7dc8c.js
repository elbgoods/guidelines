(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{371:function(e,n,t){"use strict";t.r(n);var r=t(42),a=Object(r.a)({},(function(){var e=this,n=e.$createElement,t=e._self._c||n;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"external-project-planning"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#external-project-planning"}},[e._v("#")]),e._v(" External Project Planning")]),e._v(" "),t("h2",{attrs:{id:"tickets"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#tickets"}},[e._v("#")]),e._v(" Tickets")]),e._v(" "),t("p",[t("strong",[e._v("Zuständig:")]),e._v(" Projekt Management, Frontend, Backend")]),e._v(" "),t("ul",[t("li",[e._v("Epic: Ein Modul in einem projekt")]),e._v(" "),t("li",[e._v('Story: "Als [XYZ] möchte ich [ABC]." - 1 Vorgang')]),e._v(" "),t("li",[e._v("Task: 1 Schritt eines Entwicklers")])]),e._v(" "),t("h2",{attrs:{id:"designs"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#designs"}},[e._v("#")]),e._v(" Designs")]),e._v(" "),t("p",[t("strong",[e._v("Zuständig:")]),e._v(" Projekt Management, Design")]),e._v(" "),t("ul",[t("li",[e._v("in Adobe XD erstellen")]),e._v(" "),t("li",[e._v("Adobe XD Link(s) in Tickets/Story kopieren")])]),e._v(" "),t("h2",{attrs:{id:"texte-ubersetzungen"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#texte-ubersetzungen"}},[e._v("#")]),e._v(" Texte / Übersetzungen")]),e._v(" "),t("p",[t("strong",[e._v("Zuständig:")]),e._v(" Projekt Management, Texter")]),e._v(" "),t("ul",[t("li",[e._v("Texte müssen entweder im Ticket oder in Adobe XD Design oder als extra Textdatei definiert werden (kopierbar)")])]),e._v(" "),t("h2",{attrs:{id:"epic-planung"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#epic-planung"}},[e._v("#")]),e._v(" Epic Planung")]),e._v(" "),t("p",[e._v("Findet nicht statt - Epics sind nur gruppierungen von Stories.")]),e._v(" "),t("h2",{attrs:{id:"story-planung"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#story-planung"}},[e._v("#")]),e._v(" Story Planung")]),e._v(" "),t("h3",{attrs:{id:"anforderungen"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#anforderungen"}},[e._v("#")]),e._v(" Anforderungen")]),e._v(" "),t("p",[t("strong",[e._v("Zuständig:")]),e._v(" Projekt Management, Frontend, Backend")]),e._v(" "),t("ul",[t("li",[e._v("Kundenanforderungen liegen vor")]),e._v(" "),t("li",[e._v("Ablauf/Userflow ist klar definiert")]),e._v(" "),t("li",[e._v("Designs liegen vor - sofern nötig")]),e._v(" "),t("li",[e._v("Texte/Übersetzungen liegen vor - sofern nötig")])]),e._v(" "),t("h3",{attrs:{id:"entwicklung"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#entwicklung"}},[e._v("#")]),e._v(" Entwicklung")]),e._v(" "),t("p",[t("strong",[e._v("Zuständig:")]),e._v(" Frontend, Backend")]),e._v(" "),t("ul",[t("li",[e._v("Schnittstelle(n) definieren\n"),t("ul",[t("li",[e._v("Endpoint (Method & URL - "),t("code",[e._v("Route::get(...)")]),e._v(") - Middlewares die fürs Frontend wichtig sind")]),e._v(" "),t("li",[e._v("Validierung")]),e._v(" "),t("li",[e._v("Response (Status & Body) - Erfolg & Spezialfehler ("),t("code",[e._v("abort_if()")]),e._v(" ...)")])])]),e._v(" "),t("li",[e._v("ggf. für eMails etc Frontend-URLs die das Backend wissen muss")])]),e._v(" "),t("h3",{attrs:{id:"frontend"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#frontend"}},[e._v("#")]),e._v(" Frontend")]),e._v(" "),t("p",[t("strong",[e._v("Zuständig:")]),e._v(" Frontend")]),e._v(" "),t("ul",[t("li",[e._v("Story-Design(s) in Vue-Komponenten zerlegen - für jede Komponente 1 Task-Ticket")]),e._v(" "),t("li",[e._v("Datenaustausch zwischen den Komponenten - props, events, store, API-client")]),e._v(" "),t("li",[e._v("Store mutators/accessors")]),e._v(" "),t("li",[e._v("E2E testing")])]),e._v(" "),t("h3",{attrs:{id:"backend"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#backend"}},[e._v("#")]),e._v(" Backend")]),e._v(" "),t("p",[t("strong",[e._v("Zuständig:")]),e._v(" Backend")]),e._v(" "),t("ul",[t("li",[e._v("Datenbank-Struktur & Model inkl Relationen definieren - (Migration, Model)")]),e._v(" "),t("li",[e._v("Factory Daten (sinnvolle Dummy-Daten erfinden - ggf Faker erweitern) - (Factory, ggf Seed)")]),e._v(" "),t("li",[e._v("Special-Logic - (Klassen, Services, Packages, Flowchart ...)")])]),e._v(" "),t("h2",{attrs:{id:"branches"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#branches"}},[e._v("#")]),e._v(" Branches")]),e._v(" "),t("ul",[t("li",[e._v("pro Story (mit mehr als 2 Tasks) einen Story Branch anlegen "),t("code",[e._v("story/{ticket}-{title}")]),e._v(" "),t("RouterLink",{attrs:{to:"/git/#branches"}},[e._v("Branches")])],1),e._v(" "),t("li",[e._v("pro Task ein Branch sofern wärend der Planung nicht anders besprochen")])])])}),[],!1,null,null,null);n.default=a.exports}}]);